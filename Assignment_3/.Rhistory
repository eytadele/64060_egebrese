ggplot(aes(fertility,life_expectancy, col=continent)) +
geom_point() +
facet_grid(. ~ year)
# facet by year, plots wrapped onto multiple rows
years <- c(1962,1980,1990,2000,2012)
continents <- c("Europe","Asia")
gapminder %>%
filter(year %in% years & continent %in% continents) %>%
ggplot(aes(fertility,life_expectancy, col=continent)) +
geom_point() +
facet_wrap(~year)
# facet by continent and year
filter(gapminder, year %in% c(1962,2012)) %>%
ggplot(aes(fertility,life_expectancy, col=continent)) +
geom_point() +
facet_grid(continent ~ year)
library(tidyverse)
library(dslabs)
data(gapminder)
head(gapminder)
# facet by continent and year
filter(gapminder, year %in% c(1962,2012)) %>%
ggplot(aes(fertility,life_expectancy, col=continent)) +
geom_point() +
facet_grid(continent ~ year)
library(tidyverse)
library(dslabs)
data(gapminder)
head(gapminder)
gapminder %>%
filter(year %in% years & continent %in% continents) %>%
ggplot(aes(fertility,life_expectancy, col=continent)) +
geom_point() +
facet_wrap(~year)
# scatterplot of US fertility by year
gapminder %>% filter(country=="United States") %>% ggplot(aes(year,fertility)) + geom_point()
gapminder %>% filter(country=="United States") %>% ggplot(aes(year,fertility)) + geom_line()
# CODE: Multiple time series
# line plot fertility time series for two countries(incorrect)
countries <- c("South Korea","Germany")
gapminder %>% filter(country %in% countries) %>% ggplot(aes(year,fertility)) + geom_line()
gapminder %>% filter(country %in% countries) %>% ggplot(aes(year,fertility,group=country)) + geom_line()
gapminder %>% filter(country %in% countries) %>% ggplot(aes(year,fertility,col=country)) + geom_line()
#CODE: adding labels to a plot
# Life expectancy time series - lines colored by country and labeled, no legend
labels <- data.frame(country = countries, x = c(1975,1965), y=c(60,72))
gapminder %>% filter(country %>% countries) %>% ggplot(aes(year,life_expectancy,col=country)) + geom_line() +
geom_text(data=labels, aes(x,y,label=country),size=5) + theme(legend.position = "none")
gapminder %>% filter(country %>% countries) %>% ggplot(aes(year,life_expectancy,col=country)) + geom_line() + geom_text(data=labels, aes(x,y,label=country),size=5) + theme(legend.position = "none")
gapminder %>% filter(country %in% countries) %>% ggplot(aes(year,life_expectancy,col=country)) + geom_line() + geom_text(data=labels, aes(x,y,label=country),size=5) + theme(legend.position = "none")
# CODE: Transformations
#add dollars per day variable
gampminder <- gapminder %>% mutate(dollars_per_day = gdp/population/365)
# histogram of dollars per day
past_year <- 1970
gapminder %>% filter(year ==past_year & !is.na(gdp)) %>% ggplot(aes(dollars_per_day)) + geom_histogram(binwidth=1,color="black")
# CODE: Transformations
#add dollars per day variable
gampminder <- gapminder %>% mutate(dollars_per_day = gdp/population/365)
gapminder %>% filter(year ==past_year & !is.na(gdp)) %>% ggplot(aes(dollars_per_day)) + geom_histogram(binwidth=1,color="black")
# CODE: Transformations
#add dollars per day variable
gapminder <- gapminder %>% mutate(dollars_per_day = gdp/population/365)
gapminder %>% filter(year ==past_year & !is.na(gdp)) %>% ggplot(aes(dollars_per_day)) + geom_histogram(binwidth=1,color="black")
# repeat histogram with log2 scaled data
gapminder %>% filter(year ==past_year & !is.na(gdp)) %>% ggplot(aes(log2(dollars_per_day))) + geom_histogram(binwidth=1,color="black")
# repeat histogram with log2 scaled x-axis
gapminder %>% filter(year ==past_year & !is.na(gdp)) %>% ggplot(aes(dollars_per_day)) + geom_histogram(binwidth=1,color="black") + scale_x_continuous(trans = "log2")
library(tidyverse)
library(dslabs)
data(gapminder)
head(gapminder)
# add dollars per day variable
gapminder <- gapminder %>% mutate(dollars_per_day = gdp/population/365)
# number of regions
length(levels(gapminder$region))
p <- gapminder %>% filter(year==past_year & !is.na(gdp)) %>% ggplot(aes(region,dollars_per_day))
p + geom_boxplot()
# rotate names on x-axis
p + geom_boxplot() + theme(axis.test.x = element_text(angle = 90, hjust = 1))
# rotate names on x-axis
p + geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# CODE: The reorder function
# by default, factor order is alphabetical
fac <- factor(c("Asia", "Asia", "West","West","West","West"))
levels(fac)
length(levels(fac))
fac <- reorder(fac, value, FUN = mean)
# reorder factor by the category means
value <- c(10,11,12,6,4)
fac <- reorder(fac, value, FUN = mean)
fac <- reorder(fac, value, FUN = mean)
value <- c(10, 11, 12, 6, 4)
fac <- reorder(fac, value, FUN = mean)
levels(fac)
# Code: Enhanced boxplot ordered by median income, scaled, and showing data
# reorder by median income and color by continent
p <- gapminder %>%
filter(year == past_year & !is.na(gdp)) %>%
mutate(region = reorder(region, dollars_per_day, FUN = median)) %>%    # reorder
ggplot(aes(region, dollars_per_day, fill = continent)) +    # color by continent
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("")
p
# log2 scale y-axis
p + scale_y_continuous(trans = "log2")
# add data points
p + scale_y_continuous(trans = "log2") + geom_point(show.legend = FALSE)
past_year <- 1970
# define Western countries
west <- c("Western Europe", "Northern Europe", "Southern Europe", "Northern America", "Australia and New Zealand")
# facet by West vs devloping
gapminder %>%
filter(year == past_year & !is.na(gdp)) %>%
mutate(group = ifelse(region %in% west, "West", "Developing")) %>%
ggplot(aes(dollars_per_day)) +
geom_histogram(binwidth = 1, color = "black") +
scale_x_continuous(trans = "log2") +
facet_grid(. ~ group)
gapminder %>%
filter(year %in% c(past_year, present_year) & !is.na(gdp)) %>%
mutate(group = ifelse(region %in% west, "West", "Developing")) %>%
ggplot(aes(dollars_per_day)) +
geom_histogram(binwidth = 1, color = "black") +
scale_x_continuous(trans = "log2") +
facet_grid(year ~ group)
# facet by West/developing and year
present_year <- 2010
gapminder %>%
filter(year %in% c(past_year, present_year) & !is.na(gdp)) %>%
mutate(group = ifelse(region %in% west, "West", "Developing")) %>%
ggplot(aes(dollars_per_day)) +
geom_histogram(binwidth = 1, color = "black") +
scale_x_continuous(trans = "log2") +
facet_grid(year ~ group)
# Code: Income distribution of West versus developing world, only countries with data
# define countries that have data available in both years
country_list_1 <- gapminder %>%
filter(year == past_year & !is.na(dollars_per_day)) %>% .$country
country_list_2 <- gapminder %>%
filter(year == present_year & !is.na(dollars_per_day)) %>% .$country
country_list <- intersect(country_list_1, country_list_2)
# make histogram including only countries with data available in both years
gapminder %>%
filter(year %in% c(past_year, present_year) & country %in% country_list) %>%    # keep only selected countries
mutate(group = ifelse(region %in% west, "West", "Developing")) %>%
ggplot(aes(dollars_per_day)) +
geom_histogram(binwidth = 1, color = "black") +
scale_x_continuous(trans = "log2") +
facet_grid(year ~ group)
# Code: Boxplots of income in West versus developing world, 1970 and 2010
p <- gapminder %>%
filter(year %in% c(past_year, present_year) & country %in% country_list) %>%
mutate(region = reorder(region, dollars_per_day, FUN = median)) %>%
ggplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") + scale_y_continuous(trans = "log2")
p + geom_boxplot(aes(region, dollars_per_day, fill = continent)) +
facet_grid(year ~ .)
# arrange matching boxplots next to each other, colored by year
p + geom_boxplot(aes(region, dollars_per_day, fill = factor(year)))
# smooth density plots - area under each curve adds to 1
gapminder %>%
filter(year == past_year & country %in% country_list) %>%
mutate(group = ifelse(region %in% west, "West", "Developing")) %>% group_by(group) %>%
summarize(n = n()) %>% knitr::kable()
# smooth density plots - variable counts on y-axis
p <- gapminder %>%
filter(year == past_year & country %in% country_list) %>%
mutate(group = ifelse(region %in% west, "West", "Developing")) %>%
ggplot(aes(dollars_per_day, y = ..count.., fill = group)) +
scale_x_continuous(trans = "log2")
p + geom_density(alpha = 0.2, bw = 0.75) + facet_grid(year ~ .)
# reorder factor levels
gapminder <- gapminder %>%
mutate(group = factor(group, levels = c("Others", "Latin America", "East Asia", "Sub-Saharan Africa", "West")))
# Code: Add new region groups with case_when
# add group as a factor, grouping regions
gapminder <- gapminder %>%
mutate(group = case_when(
.$region %in% west ~ "West",
.$region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia",
.$region %in% c("Caribbean", "Central America", "South America") ~ "Latin America",
.$continent == "Africa" & .$region != "Northern Africa" ~ "Sub-Saharan Africa",
TRUE ~ "Others"))
# reorder factor levels
gapminder <- gapminder %>%
mutate(group = factor(group, levels = c("Others", "Latin America", "East Asia", "Sub-Saharan Africa", "West")))
# Code: Stacked density plot
# note you must redefine p with the new gapminder object first
p <- gapminder %>%
filter(year %in% c(past_year, present_year) & country %in% country_list) %>%
ggplot(aes(dollars_per_day, fill = group)) +
scale_x_continuous(trans = "log2")
# stacked density plot
p + geom_density(alpha = 0.2, bw = 0.75, position = "stack") +
facet_grid(year ~ .)
# Code: Weighted stacked density plot
# weighted stacked density plot
gapminder %>%
filter(year %in% c(past_year, present_year) & country %in% country_list) %>%
group_by(year) %>%
mutate(weight = population/sum(population*2)) %>%
ungroup() %>%
ggplot(aes(dollars_per_day, fill = group, weight = weight)) +
scale_x_continuous(trans = "log2") +
geom_density(alpha = 0.2, bw = 0.75, position = "stack") + facet_grid(year ~ .)
library(tidyverse)
library(dslabs)
data(gapminder)
# add additional cases
gapminder <- gapminder %>%
mutate(group = case_when(
.$region %in% west ~ "The West",
.$region %in% "Northern Africa" ~ "Northern Africa",
.$region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia",
.$region == "Southern Asia" ~ "Southern Asia",
.$region %in% c("Central America", "South America", "Caribbean") ~ "Latin America",
.$continent == "Africa" & .$region != "Northern Africa" ~ "Sub-Saharan Africa",
.$region %in% c("Melanesia", "Micronesia", "Polynesia") ~ "Pacific Islands"))
surv_income %>% arrange(income)
# define a data frame with group average income and average infant survival rate
surv_income <- gapminder %>%
filter(year %in% present_year & !is.na(gdp) & !is.na(infant_mortality) & !is.na(group)) %>%
group_by(group) %>%
summarize(income = sum(gdp)/sum(population)/365,
infant_survival_rate = 1 - sum(infant_mortality/1000*population)/sum(population))
surv_income %>% arrange(income)
# plot infant survival versus income, with transformed axes
surv_income %>% ggplot(aes(income, infant_survival_rate, label = group, color = group)) +
scale_x_continuous(trans = "log2", limit = c(0.25, 150)) +
scale_y_continuous(trans = "logit", limit = c(0.875, .9981),
breaks = c(.85, .90, .95, .99, .995, .998)) +
geom_label(size = 3, show.legend = FALSE)
library(tidyverse)
library(dslabs)
data(stars)
options(digits = 3)   # report 3 significant digits
head(stars)
mean(abs(stars$magnitude))
sd(abs(stars$magnitude))
mean(stars$magnitude)
sd(stars$magnitude)
stars$magnitude + geom_density()
stars$magnitude + geom_density()
p <- stars %>% ggplot(aes(x = magnitude))
p + geom_density()
head(stars)
p <- stars %>% ggplot(aes(x = temp))
p + geom_density()
p + geom_histogram(binwidth = 1)
p <- stars %>% ggplot(aes(x = temp))
p + geom_histogram(binwidth = 1)
p + geom_histogram()
p + geom_density()
stars %>% ggplot(aes(temp, magnitude)) + geom_point()
stars %>% ggplot(aes(temp, magnitude)) + geom_point() + scale_y_reverse()
head(stars)
p <- stars %>% filter(temp > 5000)
head(p)
p <- desc(p)
head(p)
print(stars)
print(stars)
print(stars[order(temp)])
print(stars[order(stars$temp)])
library(tidyverse)
library(dslabs)
data(temp_carbon)
data(greenhouse_gases)
data(historic_co2)
head(temp_carbon)
temp_carbon %>% .$year %>% max()
print(temp_carbon)
temp_carbon %>%
filter(!is.na(carbon_emissions)) %>%
pull(year) %>%
max()
temp_carbon %>%
filter(!is.na(carbon_emissions)) %>%
max(year)
temp_carbon %>% filter(!is.na(carbon_emissions)) %>% max(year)
temp_carbon %>%
filter(!is.na(carbon_emissions)) %>%
.$year %>%
max()
temp_carbon %>%
filter(!is.na(carbon_emissions)) %>%
select(year) %>%
max()
temp_carbon %>%
filter(!is.na(carbon_emissions)) %>%
max(.$year)
print(temp_carbon)
temp_carbon %>% filter(!is.na(temp_anomaly)) %>% .$year %>% min()
temp_carbon %>% filter(!is.na(temp_anomaly)) %>% .$year %>% max()
min <- temp_carbon$temp_anomaly[temp_carbon$year==1880]
max <- temp_carbon$temp_anomaly[temp_carbon$year==2018]
print(min)
print(max)
print(max - min)
library(tidyverse)
library(dslabs)
data(temp_carbon)
data(greenhouse_gases)
data(historic_co2)
beads
beads <- rep(c("red","blue"), times = c(2,3)) #create an urn with 2 red, 3 blue
beads
sample(beads,1)
B <- 10000    # number of times to draw 1 bead
events <- replicate(B, sample(beads, 1))    # draw 1 bead, B times
tab <- table(events)    # make a table of outcome counts
tab    # view count table
prop.table(tab)    # view table of outcome proportions
?set.seed
?rep
set.seed(1, sample.kind="Rounding")    # will make R 3.6 generate a seed as in R 3.5
mean(beads == "blue")
help.start()
help("matrix")
help("demo")
demo()
demo(image,graphics)
demo(image,"graphics")
install.packages("vcd")
library(vcd)
library(dslabs)
data(murders)
murders$population
head(murders)
pop <- murders$population
length(pop)
? read.table
class(murders)
data()
library(Nile)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library('caret')
update.packages()
library('caret')
update.packages()
install.packages('caret')
library('caret')
library(ggplot2)
library('ggplot2')
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library('caret')
library("ggplot2")
load("lattice")
library("lattice")
library("caret")
b <- 1947.01
b
class(b)
b_char <- as.character(b)
class(b_char)
my_vector <- c(1,'a',2,'b')
class(my_vector)
DF <- data.frame(C1=c(1,4.37), C2=c(),C3)
DF <- data.frame(C1=c(1,4.37), C2=c('Red','Blue'),C3=(TRUE,FALSE))
DF <- data.frame(C1 = c(1,4.37), C2 = c('Red','Blue'), C3 =(TRUE,FALSE))
? data.frame
DF <- data.frame(C1 = c(1,4.37), C2 = c('Red','Blue'))
DF <- data.frame(C1 = c(1,4.37), C2 = c('Red','Blue'), C3 = c(TRUE,FALSE))
df
DF
DF$C1
DF <- data.frame(V1=1:6, Countries=c('US','UK','UK','India','China','India'))
DF
c_freq <- factor(DF$Countries)
c_freq
? count
count(DF$Countries)
x <- 0.75
y <- ifelse(x>0,14,-19.7)
y
x <- -1
y <- ifelse(x>0,14,-19.7)
y
DF <- data.frame(V1=1:6, Countries=c('US','UK','UK','India','China','India'))
DF
table(DF$Countries)
? runif
install.packages("modeest")
library(modeest)
mydata <- data.frame(x1 = c(2,2,6,4), x2 = c(3,4,2,8))
mydata
mydata$sumx <- mydata$x1 + mydata$x2
mydata
mydata$meanx <- (mydata$x1 + mydata$x2)/2
mydata
?attach
attach(mydata)
mydata$sumx <- x1 + x2
mydata$meanx <- (x1 + x2)/2
mydata
detach(mydata)
mydata$sumx <- x1 + x2
knitr::opts_chunk$set(echo = TRUE)
manager <- c(1, 2, 3, 4, 5)
date <- c("10/24/08", "10/28/08", "10/1/08", "10/12/08", "5/1/09")
country <- c("US", "US", "UK", "UK", "UK")
gender <- c("M", "F", "F", "M", "F")
age <- c(32, 45, 25, 39, 99)
q1 <- c(5, 3, 3, 3, 2)
q2 <- c(4, 5, 5, 3, 2)
q3 <- c(5, 2, 5, 4, 1)
q4 <- c(5, 5, 5, NA, 2)
q5 <- c(5, 5, 2, NA, 1)
leadership <- data.frame(manager, date, country, gender, age, q1, q2, q3, q4, q5, stringsAsFactors=FALSE)
leadership
?stringsAsFactorts
?data.frame
?factor
leadership$age[leadership$age == 99] <- NA # This recodes the variable age, when age is 99 to NA
# The statement *variable[condition]<-expression will only make the assignment when TRUE
# Now we can create the categorical variable
leadership$agecat[leadership$age > 75] <- "Elder"
leadership$agecat[leadership$age >= 55 &  leadership$age <= 75] <- "Middle Aged"
leadership$agecat[leadership$age < 55] <- "Young"
# Alternatively
leadership <- within(leadership,{
agecat <- NA
agecat[age > 75] <- "Elder"
agecat[age >= 55 & age <= 75] <- "Middle Aged"
agecat[age < 55] <- "Young" })
# agecat is now a character variable. We should really turn it into an ordered factor.
leadership$agecat <- factor(leadership$agecat,ordered = TRUE,levels=c("Elder","Middle Aged","Young"))
leadership
fix(leadership) # To interactively rename variables, or
install.packages("XQuartz")
fix(leadership)
knitr::opts_chunk$set(echo = TRUE)
manager <- c(1, 2, 3, 4, 5)
date <- c("10/24/08", "10/28/08", "10/1/08", "10/12/08", "5/1/09")
country <- c("US", "US", "UK", "UK", "UK")
gender <- c("M", "F", "F", "M", "F")
age <- c(32, 45, 25, 39, 99)
q1 <- c(5, 3, 3, 3, 2)
q2 <- c(4, 5, 5, 3, 2)
q3 <- c(5, 2, 5, 4, 1)
q4 <- c(5, 5, 5, NA, 2)
q5 <- c(5, 5, 2, NA, 1)
leadership <- data.frame(manager, date, country, gender, age, q1, q2, q3, q4, q5, stringsAsFactors=FALSE)
mydata<-data.frame(x1 = c(2, 2, 6, 4),  x2 = c(3, 4, 2, 8))
mydata$sumx <- mydata$x1 + mydata$x2
mydata$meanx <- (mydata$x1 + mydata$x2)/2
attach(mydata)
mydata$sumx <- x1 + x2
mydata$meanx <- (x1 + x2)/2
detach(mydata)
mydata <- transform(mydata,
sumx = x1 + x2,
meanx = (x1 + x2)/2)
leadership$age[leadership$age == 99] <- NA # This recodes the variable age, when age is 99 to NA
# The statement *variable[condition]<-expression will only make the assignment when TRUE
# Now we can create the categorical variable
leadership$agecat[leadership$age > 75] <- "Elder"
leadership$agecat[leadership$age >= 55 &  leadership$age <= 75] <- "Middle Aged"
leadership$agecat[leadership$age < 55] <- "Young"
# Alternatively
leadership <- within(leadership,{
agecat <- NA
agecat[age > 75] <- "Elder"
agecat[age >= 55 & age <= 75] <- "Middle Aged"
agecat[age < 55] <- "Young" })
# agecat is now a character variable. We should really turn it into an ordered factor.
leadership$agecat <- factor(leadership$agecat,ordered = TRUE,levels=c("Elder","Middle Aged","Young"))
leadership
fix(leadership)
fix(leadership)
is.na(leadership$q4)
is.na(leadership[,6:10])
leadership$age[leadership$age == 99] <- NA # This codes values of 99 to NA, so they are not included in calculations
# We might also want to exclude missing values from analyses. For example
z <- sum(leadership$q4, na.rm = T)
# We can also remove any observation with missing data using the na.omit() function.
leadership
newdata <- na.omit(leadership)
newdata
setwd("~/Documents/KSU-MSBA/64060_egebrese/Assignment_3")
library(caret)
library(e1071)
univBank <- read.csv("UniversalBank.csv")
univBank$CreditCard <- factor(univBank$CreditCard)
univBank$Online <- factor(univBank$Online)
univBank$Personal.Loan <- factor(univBank$Personal.Loan)
str(univBank)
selVars <- c(10,13,14)    # selecting Online, Credit Card, and Personal.Loan
set.seed(420)
univBank.part.mod <- createDataPartition(univBank$Personal.Loan,p=0.6, list = FALSE)
univBank.tr <- univBank[univBank.part.mod,selVars]
univBank.va <- univBank[-univBank.part.mod,selVars]
attach(univBank.tr)
ftable(Online,CreditCard,Personal.Loan)
detach(univBank.tr)
