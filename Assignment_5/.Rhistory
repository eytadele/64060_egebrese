#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
for (x in 1:nrow(part.b)) {
ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-ncol(part.b)])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
for (x in 1:nrow(part.b)) {
ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-14])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
for (x in 1:nrow(part.b)) {
ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-ncol(part.b)])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
for (x in 1:nrow(part.b)) {
ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-ncol(part.b)])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
for (x in 1:nrow(part.b)) {
ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-ncol(part.b)])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
for (x in 1:nrow(part.b)) {
ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-ncol(part.b)])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
for (x in 1:nrow(part.b)) {
ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-ncol(part.b)])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
for (x in 1:nrow(part.b)) {
ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-ncol(part.b)])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
lapply(1:nrow(part.b),
function(i) {
ClusterB$BClus[i] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[i,-ncol(part.b)])))) [6,-6])
}
)
#for (x in 1:nrow(part.b)) {
#ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-ncol(part.b)])))) [6,-6])
#}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
lapply(1:nrow(part.b),
function(i) {
ClusterB$BClus[i] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[i,-ncol(part.b)])))) [6,-6])
}
)
#for (x in 1:nrow(part.b)) {
#ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-ncol(part.b)])))) [6,-6])
#}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
#lapply(1:nrow(part.b),
#                 function(i) {
#                   ClusterB$BClus[i] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[i,-ncol(part.b)])))) [6,-6])
#                 }
#)
for (x in 1:nrow(part.b)) {
ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-ncol(part.b)])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.8, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
#lapply(1:nrow(part.b),
#                 function(i) {
#                   ClusterB$BClus[i] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[i,-ncol(part.b)])))) [6,-6])
#                 }
#)
for (x in 1:nrow(part.b)) {
ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-14])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.8, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
lapply(1:nrow(part.b),
function(i) {
ClusterB$BClus[i] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[i,-ncol(part.b)])))) [6,-6])
}
)
#for (x in 1:nrow(part.b)) {
#ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-14])))) [6,-6])
#}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.8, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#CentroidA <- A %>% gather("features","values",-cluster) %>% group_by(cluster,features) %>% summarise(mean_values = mean(values)) %>% spread(features,mean_values)
#CentroidA # centroids for each cluster per column
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
CentroidA <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
CentroidA
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
lapply(1:nrow(part.b),
function(i) {
ClusterB$BClus[i] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[i,-ncol(part.b)])))) [6,-6])
}
)
#for (x in 1:nrow(part.b)) {
#ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(CentroidA[-1],part.b[x,-14])))) [6,-6])
#}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
cent.a <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
cent.a
#create an empty dataframe and fill values with 0s
#ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
#ClusterB <- data.frame(data=seq(1,nrow(part.b),1),BClus = rep(0,nrow(part.b)))  #Finding cluster B from the columns and no of row in B and for cluster it is repeated till the last element of last row in part.b is identified.
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
for (x in 1:nrow(part.b)) {
ClusterB$BClus[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(cent.a[-1],part.b[x,-ncol(part.b)])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$BClus == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
cent.a <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
cent.a
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
x <- c("BClus")
colnames(ClusterB) <- x
ClusterB
#create an empty dataframe and fill values with 0s to store information related to clusters in part.b
ClusterB <- data.frame(matrix(ncol = 1, nrow = nrow(part.b)))
ClusterB
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
cent.a <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
cent.a
#create an empty dataframe and fill values with 0s to store information related to clusters in part.b
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
ClusterB
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
cent.a <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
cent.a
#create an empty dataframe and fill values with 0s to store information related to clusters in part.b
ClusterB <- as.data.frame(matrix(0,nrow(part.b),1))
#x <- c("BClus")
#colnames(ClusterB) <- x
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
for (x in 1:nrow(part.b)) {
ClusterB$V1[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(cent.a[-1],part.b[x,-ncol(part.b)])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
ClusterB <- ClusterB %>% mutate(originalclust = part.b$cluster)
mean(ClusterB$V1 == ClusterB$originalclust)
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
cent.a <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
cent.a
#create an empty dataframe and fill values with 0s to store information related to clusters in part.b
clust.b <- as.data.frame(matrix(0,nrow(part.b),1))
#Finding minimum distance between centroids in part.a and each observation in part.b
#this for loop will calculate the distance between centroid and each observation of B till for the complete length of the observation from min values to the max.
for (x in 1:nrow(part.b)) {
clust.b$V1[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(cent.a[-1],part.b[x,-ncol(part.b)])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
#clust.b <- clust.b %>% mutate(originalclust = part.b$cluster)
clust.b$clust0 <- part.b$cluster
mean(clust.b$V1 == clust.b$clust0)
clust.b
part.b
set.seed(420)
# Creating a model for partitioning the cereals data into two parts, A and B
Partition <- createDataPartition(cereal.df.norm2$cluster, p = 0.7, list = FALSE)
part.a <- cereal.df.norm2[Partition,]
part.b <- cereal.df.norm2[-Partition,]
#Grouping dataset by clusters and computing the mean of the group columns gives us the centroid values
cent.a <- aggregate(part.a[,1:13], list(part.a$cluster),mean)
cent.a
#create an empty dataframe and fill values with 0s to store information related to clusters in part.b
clust.b <- as.data.frame(matrix(0,nrow(part.b),1))
# The code below first combines the centroids from A with values from part.b and computes the distance.
# Then using which.min we can save the indices that represent the new clusters in clust.b
for (x in 1:nrow(part.b)) {
clust.b$V1[x] <- which.min(as.matrix(get_dist(as.data.frame(rbind(cent.a[-1],part.b[x,-ncol(part.b)])))) [6,-6])
}
#comparing B partition with original data, with the original cluster we are comparing what has changed in the new cluster in B
#clust.b <- clust.b %>% mutate(originalclust = part.b$cluster)
#Here we can compute the average similarity of the clusters
clust.b$clust0 <- part.b$cluster
mean(clust.b$V1 == clust.b$clust0)
# Creating a model for partitioning the cereals data into two parts,
Partition_idx <- createDataPartition(cereal.df.norm2$cluster, p = 0.5, list = FALSE)
part.A <- cereal.df.norm2[Partition_idx,]
part.B <- cereal.df.norm2[-Partition_idx,]
# computing distance based on the normalized data and the 13 variables selected
dist.a <- dist(part.A, method = "euclidean")
dist.b <- dist(part.B, method = "euclidean")
# Clustering using Ward method
hc_ward_a <- hclust(dist.a, method = "ward.D")
hc_ward_b <- hclust(dist.b, method = "ward.D")
cor(cophenetic(hc_ward_a), cophenetic(hc_ward_b))
dend.a <- as.dendrogram(hc_ward_a)
dend.b <- as.dendrogram(hc_ward_b)
cor(cophenetic(dend.a), cophenetic(dend.b))
part.A
dim(dend.a)
Partition_idx <- createDataPartition(cereal.df.norm2$cluster, p = 0.5, list = FALSE)
part.A <- cereal.df.norm2[Partition_idx,]
part.B <- cereal.df.norm2[-Partition_idx,]
dim(part.B)
dim(part.A)
Partition_idx <- createDataPartition(cereal.df.norm2$cluster, p = 0.51, list = FALSE)
part.A <- cereal.df.norm2[Partition_idx,]
part.B <- cereal.df.norm2[-Partition_idx,]
dim(part.A)
dim(part.B)
Partition_idx <- createDataPartition(cereal.df.norm2$cluster, p = 0.500, list = FALSE)
part.A <- cereal.df.norm2[Partition_idx,]
part.B <- cereal.df.norm2[-Partition_idx,]
dim(part.A)
Partition_idx <- createDataPartition(cereal.df.norm2$cluster, p = 0.49, list = FALSE)
part.A <- cereal.df.norm2[Partition_idx,]
part.B <- cereal.df.norm2[-Partition_idx,]
dim(part.A)
Partition_idx <- createDataPartition(cereal.df.norm2$cluster, p = 0.6, list = FALSE)
part.A <- cereal.df.norm2[Partition_idx,]
part.B <- cereal.df.norm2[-Partition_idx,]
dim(part.A)
Partition_idx <- createDataPartition(cereal.df.norm2$cluster, p = 0.55, list = FALSE)
part.A <- cereal.df.norm2[Partition_idx,]
part.B <- cereal.df.norm2[-Partition_idx,]
dim(part.A)
dim(part.B)
Partition_idx <- createDataPartition(cereal.df.norm2$cluster, p = 0.511, list = FALSE)
part.A <- cereal.df.norm2[Partition_idx,]
part.B <- cereal.df.norm2[-Partition_idx,]
dim(part.A)
dim(part.B)
Partition_idx <- createDataPartition(cereal.df.norm2$cluster, p = 0.4999, list = FALSE)
part.A <- cereal.df.norm2[Partition_idx,]
part.B <- cereal.df.norm2[-Partition_idx,]
dim(part.A)
dim(part.B)
Partition_idx <- createDataPartition(cereal.df.norm2$cluster, p = 0.52, list = FALSE)
part.A <- cereal.df.norm2[Partition_idx,]
part.B <- cereal.df.norm2[-Partition_idx,]
dim(part.A)
dim(part.B)
dim(cereal.df.norm2)
dim(hc_ward_a)
# Creating a model for partitioning the cereals data into two parts,
Partition_idx <- createDataPartition(cereal.df.norm2$cluster, p = 0.5, list = FALSE)
part.A <- cereal.df.norm2[Partition_idx,]
part.B <- cereal.df.norm2[-Partition_idx,]
# computing distance based on the normalized data and the 13 variables selected
dist.a <- dist(part.A[-36:39,], method = "euclidean")
# Creating a model for partitioning the cereals data into two parts,
Partition_idx <- createDataPartition(cereal.df.norm2$cluster, p = 0.5, list = FALSE)
part.A <- cereal.df.norm2[Partition_idx,]
part.B <- cereal.df.norm2[-Partition_idx,]
# computing distance based on the normalized data and the 13 variables selected
dist.a <- dist(part.A, method = "euclidean")
dist.b <- dist(part.B, method = "euclidean")
# Clustering using Ward method
hc_ward_a <- hclust(dist.a, method = "ward.D")
hc_ward_b <- hclust(dist.b, method = "ward.D")
cor(cophenetic(hc_ward_a), cophenetic(hc_ward_b))
